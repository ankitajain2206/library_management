var http = require("http");
var path = require("path");
var express = require("express");
var bodyParser = require("body-parser");
var data = require('./data.js');
var queueProduce = require('./queue/producer.js');
var queueConsume = require('./queue/consumer.js');
var logger = require('./log');


var app = express();
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());


app.set('port', 3000);
app.use(express.static(path.join(__dirname, '/public')));


//this method will add book in redis database
app.post('/add', function(req, res){
		/* dataInQueue is a method in producer.js which accepts 3 parameters 
		1. type of request which will become the binding and routing key for exchange.
		2. request
		3. callback function */
		queueProduce.dataInQueue("add", req.body, function(response){
			logger.debug("response generated by adding book is = "+JSON.stringify(response));
				if(response){
				res.send(JSON.stringify("{Status:"+response+"}"));
			}

		});
});


//this method will fetch book information 
app.post('/getDetails', function(req, res){

		/* dataInQueue is a method in producer.js which accepts 3 parameters 
		1. type of request which will become the binding and routing key for exchange.
		2. request
		3. callback function */
	
	queueProduce.dataInQueue("getDetails", req.body, function(response){

			logger.debug("response generated by adding get request is = "+JSON.stringify(response));
			res.send(JSON.stringify(response));

		});
});


//this method will fetch book information 
app.post('/getAllDetails', function(req, res){
	/* dataInQueue is a method in producer.js which accepts 3 parameters 
		1. type of request which will become the binding and routing key for exchange.
		2. request
		3. callback function */
	queueProduce.dataInQueue("getAllDetails", req.body, function(response){

			logger.debug("response generated by getDetails book is = "+JSON.stringify(response));
			res.send(response);

		});
});


app.post('/delete', function(req, res){
	/* dataInQueue is a method in producer.js which accepts 3 parameters 
		1. type of request which will become the binding and routing key for exchange.
		2. request
		3. callback function */
	queueProduce.dataInQueue("delete", req.body, function(response){

			logger.debug("response generated by deleting book is = "+JSON.stringify(response));
			res.send(JSON.stringify("Status:"+response));

		});
	

});



http.createServer(app).listen(app.get('port'), function(){

	console.log("server is running on port = "+app.get('port'));
	logger.info('server is running on port = '+app.get('port') );

});

module.exports = app ;
